// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SocialNetwork.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Posting On Timeline")]
    public partial class PostingOnTimelineFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PostingOnTimeline.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Posting On Timeline", "In order to socialise with friends\nAs a user who uses this social network\nI want " +
                    "to tweet and see my friends timeline", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple Users Posting")]
        [NUnit.Framework.TestCaseAttribute("Alice", "I love the weather today", null)]
        [NUnit.Framework.TestCaseAttribute("Bob", "Damn! We lost!", null)]
        [NUnit.Framework.TestCaseAttribute("Bob", "Good game though.", null)]
        public virtual void MultipleUsersPosting(string user_Name, string tweet_Message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple Users Posting", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given(string.Format("a User \"{0}\" has an account", user_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When(string.Format("they publish a tweet \"{0}\"", tweet_Message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then(string.Format("the timeline should contain \"{0}\"", tweet_Message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can view Bobs timeline")]
        public virtual void ICanViewBobsTimeline()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can view Bobs timeline", ((string[])(null)));
#line 18
 this.ScenarioSetup(scenarioInfo);
#line 19
  testRunner.Given("a User \"Bob\" has an account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
  testRunner.When("they publish a tweet \"Damn! we lost!\" 1 mins ago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
  testRunner.And("they publish a tweet \"Good game though.\" 2 mins ago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
  testRunner.Then("the timeline should contain \"Damn! We lost! (1 minute ago)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
  testRunner.Then("the timeline should contain \"Good game though. (2 minutes ago)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can view Alice and Bob’s timelines")]
        [NUnit.Framework.TestCaseAttribute("Alice", "I love the weather today", "I love the weather today (5 minutes ago)", "5", null)]
        [NUnit.Framework.TestCaseAttribute("Bob", "Damn! We lost!", "Damn! We lost! (1 minute ago)", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Bob", "Good game though.", "Good game though. (2 minutes ago)", "2", null)]
        public virtual void ICanViewAliceAndBobSTimelines(string user_Name, string tweet_Message, string formatted_Tweet, string minutes_Passed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can view Alice and Bob’s timelines", exampleTags);
#line 25
 this.ScenarioSetup(scenarioInfo);
#line 26
  testRunner.Given(string.Format("a User \"{0}\" has an account", user_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
  testRunner.When(string.Format("they publish a tweet \"{0}\" {1} mins ago", tweet_Message, minutes_Passed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
  testRunner.Then(string.Format("the timeline should contain \"{0}\"", formatted_Tweet), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Charlie Follows Alice")]
        public virtual void CharlieFollowsAlice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Charlie Follows Alice", ((string[])(null)));
#line 36
 this.ScenarioSetup(scenarioInfo);
#line 37
  testRunner.Given("a User \"Charlie\" has an account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
  testRunner.When("they Follow User \"Alice\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
  testRunner.And("they publish a tweet \"I\'m in New York today! Anyone want to have a coffee?\" 2 sec" +
                    "onds ago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
  testRunner.Then("the timeline should contain \"Charlie follows Alice\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
  testRunner.Then("the timeline should contain \"I\'m in New York today! Anyone want to have a coffee?" +
                    " (2 seconds ago)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
